When would you want to use a remote repository rather than keeping all your work local?
    Прежде всего GitHub предоставляет облачное хранилище файлов проекта.
    Любой сколько-нибудь развитый программный проект следует хранить на GitHub
    и быть уверенным, что файлы не будет утрачены, например, вместе с выходом из строя
    жесткого диска на локальном компьютере. При этом доступ к проекту можно получить с любого
    подключенного к интернету устройства. Кроме того, доступ может быть ограничен или быть публичным.
    С другой стороны GitHub - это, кончено, же сервис контроля версий файлов. Сайт
    предоставляет возможности локального git: ветвление и создание коммитов. При этом
    можно создавать файлы, редактировать их и удалять. В целом: любой open source проект
    следут хранить на GitHub - все приемущества очевидны. Проекты с закрытым кодом
    потребуют небольшой платы для размещения в частном доступе.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Пусть файл был изменен локально. Автоматическая выгрузка из удаленного
    репозитория может вызвать конфликт. Или, возможно, даже потерю всех 
    локальных изменений. Хотя скорее автоматическая выгрузка потерпит
    неудачу как в случае с попыткой переключиться на другую ветку, когда
    есть отложенные коммиты. Хотя для некоторых рабочих мест автоматическая
    выгрузка весьма удобна - например, если необходимо иметь локально
    только для компиляции и запуска, но не для изменений самую свежую версию 
    проекта. В целом, вопрос о конфликте локальных и удаленных изменений решается,
    по всей видимости, с использованием веток. Локальная работа может проводиться
    в специальной ветке local, в то время как ветка master может автоматически 
    обнавляться с репозитория на GitHub.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Если требутся иметь более одной версии файлов проекта и иметь возможность 
    переключаться между этими версиями, то понадобиться создать ветку (branch)
    в истории изменений. В последствии ветки могут быть объединены в одну (merge).
    Ветки позволяют развивать проект параллельными путями, позволяя в рамках
    одного проетка иметь несколько схожих. Но фактически, это один проект,
    развитый в относительно независимых направлениях, имеющих общих предков,
    т.е. имеющих общие коммиты. Также, ветки позволяют имея рабочую версию проекта
    выполнять рефакторинг, эксперементировать, концентрироваться на разработке
    новой функции, и прочее, предполагая в будущем объединить вспомогательную
    и мастер-версию проекта в одну мастер-версию. Вся история изменений полностью,
    т.е. все векти и все коммиты, все будет сохранено на GitHub при выполнении комманды push.

    Если требуется иметь полностью независимую копию всего проекта со всей историей
    его изменений, то понадобиться комнада clone. Это команда может быть выполнена
    для локального проекта, или для проекта на удаленном репозитории, вслючая
    GitHub. Та же процедура создания копии целого проекта со всей его историей
    но в пределах GitHub называется fork. Далее форк может быть, например, клонирован
    на локальный компьютер. Т.е. clone и fork имеют одну и ту же цель - создание
    полной копии всего проекта со всей историей изменений, но fork выполняется
    серверами GitHub в одном аккаунте или между аккаунтами, а clone выполняется
    git-ом локального компьютера, на котором будет сохранена копия, при этом 
    репозиторий-оригинал может размещаться как на локольном компьютере, так и удаленно,
    в том числе на GitHub.


What is the benefit of having a copy of the last known state of the remote
stored locally?

    Основное приемущество - меньшая вероятность необходимости выполнять слияние
    локальной и удаленной веток в ручном режиме при синхронизации локального и
    удаленного репозиториев. Если новый коммит был добавлен локально, то последующая 
    команда push легко обновит удаленный репозиторий. Если ранее был добавлен коммит 
    на уделнном репозитории, то команда pull выполнит fast-forward слияние в
    локальный репозиторий без возникновения конфликтов. 
    
    Тем не менее, за то время, пока будет осуществляться локальное редактирование 
    с последующим коммитом, новый коммит может появиться и на GitHub. В этом случае 
    без возникновения конфликтов скорее всего не обойтись, и понадобиться выполнить 
    слияние в ручном режиме.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Fill in your answer here

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here
